name: CI-CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Build and push Docker images
        run: |
          docker-compose -f deploy/docker-compose.yaml build --progress plain
          docker-compose -f deploy/docker-compose.yaml push

        env:
          DATABASE_URL: ${{ vars.DATABASE_URL }}
          ENV: ${{ vars.ENV }}
          API_KEY: ${{ vars.API_KEY }}
          APP_HOST: ${{ vars.APP_HOST }}
          APP_PORT: ${{ vars.APP_PORT }}
          APP_URL: ${{ vars.APP_URL }}
          FROM_EMAIL: ${{ vars.FROM_EMAIL }}
          GRPC_SERVER: ${{ vars.GRPC_SERVER }}
          JWT_SECRET_KEY: ${{ vars.JWT_SECRET_KEY }}
          JWT_EXPIRES_IN: ${{ vars.JWT_EXPIRES_IN }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          S3_ACCESS_KEY_ID: ${{ vars.S3_ACCESS_KEY_ID }}
          S3_BUCKET: ${{ vars.S3_BUCKET }}
          S3_DOMAIN: ${{ vars.S3_DOMAIN }}
          S3_ENDPOINT: ${{ vars.S3_ENDPOINT }}
          S3_REGION: ${{ vars.S3_REGION }}
          S3_SECRET_ACCESS_KEY: ${{ vars.S3_SECRET_ACCESS_KEY }}
          SMTP_USERNAME: ${{ vars.SMTP_USERNAME }}
          SMTP_HOST: ${{ vars.SMTP_HOST }}
          SMTP_PASSWORD: ${{ vars.SMTP_PASSWORD }}
          SMTP_PORT: ${{ vars.SMTP_PORT }}

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Stop and remove old containers
        run: |
          docker-compose -f deploy/docker-compose.yaml down
          docker-compose -f deploy/docker-compose.yaml up -d

      - name: Clean up unused Docker resources
        run: |
          docker system prune -af --volumes
